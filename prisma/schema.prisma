// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @unique @default(uuid())
  username    String        @unique
  email       String        @unique
  password    String
  role        Role          @default(user)
  extra       String?
  status      UserStatus    @default(active)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Order       Order[]
  productView ProductView[]

  review Review[]

  shop         Shop?
  shopFollower ShopFollower[]
  userData     UserData?
}

model UserData {
  id            String  @id @unique @default(uuid())
  userId        String  @unique
  firstName     String?
  lastName      String?
  contactNumber Int?
  address       String?
  gender        String?
  age           Int?

  user User @relation(fields: [userId], references: [id])
}

model Shop {
  id           String         @id @default(uuid())
  vendorId     String         @unique
  name         String
  logo         String?
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  vendor       User           @relation(fields: [vendorId], references: [id])
  product      Product[]
  Order        Order[]
  shopFollower ShopFollower[]
}

model Product {
  id             String        @id @default(uuid())
  shopId         String
  name           String
  description    String?
  price          Float
  isFlash        Boolean?      @default(false)
  salesCount     Int           @default(0)
  viewCount      Int           @default(0)
  categoryId     String
  inventoryCount Int           @default(0)
  discount       Float         @default(0.0)
  images         String[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  shop           Shop          @relation(fields: [shopId], references: [id])
  productView    ProductView[]
  category       Category      @relation(fields: [categoryId], references: [id])
  review         Review[]
  OrderItems     OrderItem[]
  // CartItems       CartItem[]
}

model ProductView {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  viewCount Int      @default(0)
  userId    String?
  ip        String?
  userAgent String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  images      String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String        @id @default(uuid())
  shopId      String
  shop        Shop          @relation(fields: [shopId], references: [id])
  customerId  String
  customer    User          @relation(fields: [customerId], references: [id])
  status      PaymentStatus @default(pending)
  totalAmount Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItems  OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId, userId])
}

model ShopFollower {
  userId String
  shopId String

  user User @relation(fields: [userId], references: [id])
  shop Shop @relation(fields: [shopId], references: [id])

  @@unique([userId, shopId])
}

model Banner {
  id       String  @id @default(uuid())
  title    String?
  subtitle String?
  image    String
  link     String?
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  admin
  vendor
  user
  test
}

enum UserStatus {
  block
  active
}

enum PaymentStatus {
  pending
  completed
  failed
}
