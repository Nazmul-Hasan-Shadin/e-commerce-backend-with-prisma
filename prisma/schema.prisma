// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String      @id @unique  @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role
  status UserStatus @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order Order[]

  review Review[]

  shop Shop?

}


model Shop {
  id          String      @id  @default(uuid())
  vendorId    String      @unique
  name        String
  logoUrl     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vendor      User @relation(fields: [vendorId], references: [id])
  product Product[]
  Order Order[]

}


model Product {
  id              String      @id @default(uuid())
  shopId          String
  name            String
  description     String?
  price           Float
  categoryId        String
  inventoryCount  Int      @default(0)
  discount        Float    @default(0.0) 
  images          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  shop             Shop  @relation(fields: [shopId], references: [id])


  category    Category   @relation(fields: [categoryId], references: [id])
  review         Review[]
  OrderItems      OrderItem[]
  // CartItems       CartItem[]
}


model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?    // Optional description for the category
  // parentId    String?    // For nested categories (if needed)
  // parent      Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  // children    Category[] @relation("CategoryParent")
  products    Product[]

  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  
}


model Order {
  id          String        @id @default(uuid())
  shopId      String
  shop        Shop          @relation(fields: [shopId], references: [id])
  customerId  String
  customer    User          @relation(fields: [customerId], references: [id])
  status      PaymentStatus   @default(pending)
  totalAmount Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItems  OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

  

  model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId, userId])
}




enum Role {
  admin
  vendor
  user
}

enum UserStatus {
  block
  active
}
enum PaymentStatus {
  pending
  completed
  failed
}